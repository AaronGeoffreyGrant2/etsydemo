<%= form_for(listing, html: { multipart: true } ) do |f| %>
  <% if @listing.errors.any? %>
    <div id="error_explanation" class="alert alert-danger alert-dismissable">
      <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
      <h4><%= pluralize(@listing.errors.count, "error") %> prohibited this listing from being saved:</h4>

      <ul>
      <% @listing.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div id="stripe_error" class="alert alert-danger" style="display:none">
    <noscript>JavaScript is not enabled and is required for this form. First enable it in your web browser settings.</noscript>
  </div>

  <div class="form-group">
    <%= f.label :name %>
    <%= f.text_field :name, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= f.label :description %>
    <%= f.text_area :description, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= f.label :price %>
    <%= f.text_field :price, class: "form-control" %>
  </div>

   <div class="form-group">
    <%= f.label :post_on_facebook %>
    <%= f.check_box :post_on_facebook, class: "form-control" %>
  </div>

  <%= f.hidden_field :image %>


  <html>
<head>
<title>Sketchpad</title>

<script type="text/javascript">
    // Variables for referencing the canvas and 2dcanvas context
    var canvas,ctx,size = 10,r=0,g=0,b=0;

    // Variables to keep track of the mouse position and left-button status
    var mouseX,mouseY,mouseDown=0;

    // Draws a dot at a specific position on the supplied canvas name
    // Parameters are: A canvas context, the x position, the y position, the size of the dot
    function drawDot(ctx,x,y,size) {

        // Select a fill style
        ctx.fillStyle = 'rgb('+r+','+g+','+b+')';

        // Draw a filled circle
        ctx.beginPath();
        ctx.arc(x, y, size, 0, Math.PI*2, true);
        ctx.closePath();
        ctx.fill();
    }

    // Clear the canvas context using the canvas width and height
    function clearCanvas(canvas,ctx) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    // Keep track of the mouse button being pressed and draw a dot at current location
    function sketchpad_mouseDown() {
        mouseDown=1;
        drawDot(ctx,mouseX,mouseY,size);
    }

    // Keep track of the mouse button being released
    function sketchpad_mouseUp() {
        mouseDown=0;
    }

    // Keep track of the mouse position and draw a dot if mouse button is currently pressed
    function sketchpad_mouseMove(e) {
        // Update the mouse co-ordinates when moved
        getMousePos(e);

        // Draw a dot if the mouse button is currently being pressed
        if (mouseDown==1) {
            drawDot(ctx,mouseX,mouseY,size);
        }
    }

    // Get the current mouse position relative to the top-left of the canvas
    function getMousePos(e) {
        if (!e)
            var e = event;

        if (e.offsetX) {
            mouseX = e.offsetX;
            mouseY = e.offsetY;
        }
        else if (e.layerX) {
            mouseX = e.layerX;
            mouseY = e.layerY;
        }
     }


    // Set-up the canvas and add our event handlers after the page has loaded
    function init() {
        // Get the specific canvas element from the HTML document
        canvas = document.getElementById('sketchpad');

        // If the browser supports the canvas tag, get the 2d drawing context for this canvas
        if (canvas.getContext)
            ctx = canvas.getContext('2d');

        // Check that we have a valid context to draw on/with before adding event handlers
        if (ctx) {
            canvas.addEventListener('mousedown', sketchpad_mouseDown, false);
            canvas.addEventListener('mousemove', sketchpad_mouseMove, false);
            window.addEventListener('mouseup', sketchpad_mouseUp, false);
        }
    }

    function setR(){
      r = document.getElementById("colorR").value;
    }
    function setG(){
      g = document.getElementById("colorG").value;
    }
    function setB(){
      b = document.getElementById("colorB").value;
    }

    function setSize(){
      size = document.getElementById("sizeSelect").value;
    }
    init();

    // https://github.com/megancoyle/map_sketch go here to figure out how to use this code
    // megancoyle put the code in her javascripts folder under sciprts.js and megancoyle put
    // her form with her image on under views/drawings/new.html.erb

    // use base64 and store value to input to save image to database
  document.getElementById('create-drawing').addEventListener('click', function(){
    var dataUrl = canvas.toDataURL("image/jpeg");
    var dataImg = document.createElement('img');
    dataImg.src = dataUrl;
    var drawingField = document.createElement('div');
    drawingField.innerHTML = "<input type='hidden' name='listing[image]' id='image' value='" + dataImg.src + "'>"
    document.getElementById('listing_image').value = dataUrl;
  });
</script>

<style>
/* Some CSS styling */
#sketchpadapp {
    /* Prevent nearby text being highlighted when accidentally dragging mouse outside confines of the canvas */
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}
.leftside {
    float:left;
    width:220px;
    background-color:#def;
    padding:10px;
    border-radius:4px;
}
.rightside {
    float:left;
    margin-left:10px;
}
#sketchpad {
    float:left;
    border:2px solid #888;
    border-radius:4px;
    position:relative; /* Necessary for correct mouse co-ords in Firefox */
}
</style>
</head>

<body onload="init()">
    <div id="sketchpadapp">
        <div class="leftside">
             Simple mouse-based HTML5 canvas sketchpad.<br/><br/>
             Draw something by holding down the mouse button or using single clicks.<br/><br/>
             On a touchscreen, tapping the area will register as a single mouse click.<br/><br/>

             <input type="submit" value="Clear Sketchpad" onclick="clearCanvas(canvas,ctx);"><br>
             R<input type="range" id='colorR' min="0" max="255" value = '0' onchange='setR();'><br>
             G<input type="range" id='colorG' min="0" max="255" value = '0' onchange='setG();'><br>
             B<input type="range" id='colorB' min="0" max="255" value = '0' onchange='setB();'><br>
             size:<input type="range" id='sizeSelect' min="5" max="50" value = '10' step="5" onchange='setSize();'>
        </div>
        <div class="rightside">
            <canvas id="sketchpad" height="500" width="700">
            </canvas>
        </div>
    </div>
</body>
</html>

  <% if current_user.recipient.blank? %>
    <br>
    <h1>Bank Account Information</h1>

    <div class="form-group">
      <%= label_tag :country %>
      <%= text_field_tag :country, nil, { :name => nil, :'data-stripe' => "country", class: "form-control" } %>
    </div>
    <div class="form-group">
      <%= label_tag :routing_number %>
      <%= text_field_tag :routing_number, nil, { :name => nil, :'data-stripe' => "routingNumber", class: "form-control" } %>
    </div>
    <div class="form-group">
      <%= label_tag :account_number %>
      <%= text_field_tag :account_number, nil, { :name => nil, :'data-stripe' => "accountNumber", class: "form-control" } %>
    </div>
  <% end %>

  <div class="form-group">
    <%= f.submit :id => 'create-drawing' %>
  </div>
<% end %>